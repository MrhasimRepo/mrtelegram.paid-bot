from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

ADMIN_ID = 5073222820  # Apna admin ID yahan set karo


def is_admin(update: Update):
    return update.effective_user and update.effective_user.id == ADMIN_ID


async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update):
        await update.message.reply_text("‚õî ‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à!")
        return

    keyboard = [
        [InlineKeyboardButton("üë• ‡§Ø‡•Ç‡§ú‡§∞ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§¶‡•á‡§ñ‡•á‡§Ç", callback_data="admin_users")],
        [InlineKeyboardButton("üì¢ ‡§∏‡§≠‡•Ä ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§≠‡•á‡§ú‡•á‡§Ç", callback_data="admin_broadcast")],
        # Aage ka option tum customize kar sakte ho
    ]
    await update.message.reply_text(
        "‚öôÔ∏è *‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡§Ç‡§ü‡•ç‡§∞‡•ã‡§≤ ‡§™‡•à‡§®‡§≤*",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


async def admin_users_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update):
        await update.callback_query.answer("‚õî ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à!", show_alert=True)
        return

    conn = context.bot_data.get("db_conn")
    if conn is None:
        await update.callback_query.answer("‚ùå ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ!", show_alert=True)
        return

    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM users")
    count = cursor.fetchone()[0]

    await update.callback_query.edit_message_text(f"üë• ‡§ï‡•Å‡§≤ ‡§Ø‡•Ç‡§ú‡§∞ ‡§ú‡•ã ‡§¨‡•ã‡§ü ‡§®‡•á ‡§ú‡•ã‡§°‡§º‡•á ‡§π‡•à‡§Ç: {count}")


async def admin_broadcast_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update):
        await update.callback_query.answer("‚õî ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à!", show_alert=True)
        return

    await update.callback_query.edit_message_text(
        "üì¢ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡§π ‡§Æ‡•á‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡•á‡§Ç ‡§ú‡•ã ‡§Ü‡§™ ‡§∏‡§≠‡•Ä ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã ‡§≠‡•á‡§ú‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§\n\n"
        "(‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü, ‡§≤‡§ø‡§Ç‡§ï, ‡§´‡•ã‡§ü‡•ã ‡§Ø‡§æ ‡§°‡•â‡§ï‡•ç‡§Ø‡•Ç‡§Æ‡•á‡§Ç‡§ü ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§)"
    )
    context.user_data["broadcast_mode"] = True


async def handle_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update):
        return
    if not context.user_data.get("broadcast_mode"):
        return

    context.user_data["broadcast_mode"] = False

    conn = context.bot_data.get("db_conn")
    if conn is None:
        await update.message.reply_text("‚ùå ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§ ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ‡•§")
        return

    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()

    sent_count = 0
    failed_count = 0

    if update.message.photo:
        photo_file_id = update.message.photo[-1].file_id
        caption = update.message.caption or ""
        for (uid,) in users:
            try:
                await context.bot.send_photo(chat_id=uid, photo=photo_file_id, caption=caption)
                sent_count += 1
            except Exception:
                failed_count += 1
    elif update.message.document:
        doc_file_id = update.message.document.file_id
        caption = update.message.caption or ""
        for (uid,) in users:
            try:
                await context.bot.send_document(chat_id=uid, document=doc_file_id, caption=caption)
                sent_count += 1
            except Exception:
                failed_count += 1
    else:
        text = update.message.text
        for (uid,) in users:
            try:
                await context.bot.send_message(chat_id=uid, text=text)
                sent_count += 1
            except Exception:
                failed_count += 1

    await update.message.reply_text(f"üì¢ ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§™‡•Ç‡§∞‡§æ ‡§π‡•Å‡§Ü‡•§\n‡§∏‡•á‡§Ç‡§°: {sent_count}\n‡§´‡•á‡§≤: {failed_count}")
